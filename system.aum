pragma Unsafe_Module;

import Austral.Memory (
    Pointer,
    spanToPointer
);

module body System is
    record SystemCapability: Linear is
    end;

    generic [R: Region]
    function acquireSystem(root: &![RootCapability, R]): SystemCapability is
        return SystemCapability();
    end;

    function releaseSystem(sys: SystemCapability): Unit is
        let {} := sys;
        return nil;
    end;

    generic [R: Region, Q: Region]
    function system(sys: &![SystemCapability, R], command: Span[Nat8, Q]): Int32 is
        let command_ptr: Pointer[Nat8] := spanToPointer(command);
        return systemInner(command_ptr);
    end;

    pragma Foreign_Import(External_Name => "system");
    function systemInner(command: Pointer[Nat8]): Int32 is
    end;
end module body.
