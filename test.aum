import IO.File (
    FileHandle,
    open,
    close,
    read,
    write
);

import Standard.Buffer (
    Buffer,
    getSpan,
    destroyFree
);

import System (
    SystemCapability,
    acquireSystem,
    releaseSystem,
    system
);

import FileSystem (
    FileSystemCapability,
    acquireFileSystem,
    releaseFileSystem
);

module body Test is

    function main(root: RootCapability): ExitCode is
        var mut_root: RootCapability := root;
        test(testFileNotExist(&!mut_root), "Nonexistent file test");
        test(testFileExist(&!mut_root), "Existent file test");
        test(testReadFile(&!mut_root), "Read file test");
        test(testWriteFile(&!mut_root), "Write new file test");
        surrenderRoot(mut_root);

        return ExitSuccess();
    end;

    generic [R: Region]
    function testFileNotExist(root: &![RootCapability, R]): Bool is
        var fs: FileSystemCapability := acquireFileSystem(root);
        let maybe_fh: Option[FileHandle] := open(&!fs, "nonexist", "r");
        case maybe_fh of
            when None do
                releaseFileSystem(fs);
                return true;
            when Some(value as fh: FileHandle) do
                close(fh);
                releaseFileSystem(fs);
                return false;
        end case;
    end;

    generic [R: Region]
    function testFileExist(root: &![RootCapability, R]): Bool is
        var sys: SystemCapability := acquireSystem(&~root);
        var fs: FileSystemCapability := acquireFileSystem(&~root);
        system(&!sys, "touch exist");
        let maybe_fh: Option[FileHandle] := open(&!fs, "exist", "r");

        case maybe_fh of
            when None do
                system(&!sys, "rm exist");
                releaseSystem(sys);
                releaseFileSystem(fs);
                return false;
            when Some(value as fh: FileHandle) do
                close(fh);
                system(&!sys, "rm exist");
                releaseSystem(sys);
                releaseFileSystem(fs);
                return true;
        end case;
    end;

    generic [R: Region]
    function testReadFile(root: &![RootCapability, R]): Bool is 
        var fs: FileSystemCapability := acquireFileSystem(root);
        let maybe_fh: Option[FileHandle] := open(&!fs, "lipsum.txt", "r");
        case maybe_fh of 
            when None do
                releaseFileSystem(fs);
                return false;
            when Some(value as fh: FileHandle) do
                let count: Index := 360;
                let buf: Buffer[Nat8] := read(&fh, count);
                printLn(getSpan(&buf, 0, count - 1));
                destroyFree(buf);
                close(fh);
                releaseFileSystem(fs);
                return true;
        end case;
    end;

    generic [R: Region]
    function testWriteFile(root: &![RootCapability, R]): Bool is
        var sys: SystemCapability := acquireSystem(&~root);
        var fs: FileSystemCapability := acquireFileSystem(&~root);
        let maybe_fh: Option[FileHandle] := open(&!fs, "newfile.txt", "w");
        case maybe_fh of
            when None do
                releaseFileSystem(fs);
                releaseSystem(sys);
                return false;
            when Some(value: FileHandle) do
                var fh: FileHandle := value;
                let written: Index := write(&!fh, "Hello, there!\n");
                close(fh);
                system(&!sys, "echo newfile.txt contains: && cat newfile.txt && rm newfile.txt");
                releaseFileSystem(fs);
                releaseSystem(sys);
                return written = 14;
        end case;
    end;

    function test(truth: Bool, title: Span[Nat8, Static]): Unit is
        print("Test '");
        print(title);
        if truth then
            printLn("' Passed");
        else
            printLn("' Failed");
        end if;
        return nil;
    end;
        

end module body.

